<?xml version="1.0" encoding="UTF-8" ?>
<syntax name="elixir">
    <meta>
        <name>Elixir</name>
        <type>script</type>
        <preferred-file-extension>ex</preferred-file-extension>
        <scriptable shebang="#!/usr/bin/env elixir" />
    </meta>
    
    <detectors>
        <extension priority="1.0">ex,exs</extension>
        <filename priority="1.0">mix.lock</filename>
    </detectors>
    
    <indentation>
        <increase>
            <expression />
        </increase>
        <decrease>
            <expression />
        </decrease>
    </indentation>
    
    <comments>
        <single>
            <expression>#</expression>
        </single>
    </comments>
    
    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>
    
    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
    </surrounding-pairs>
    
    <scopes>
        <include syntax="self" collection="comments" />
        <include syntax="self" collection="definitions" />
        <include syntax="self" collection="keywords" />
        <include syntax="self" collection="values" />
        <include syntax="self" collection="identifiers" />
        <include syntax="self" collection="syntax" />
    </scopes>
    
    <collections>
        <!-- 
                                                                                          .            
                                                                                        .o8            
        .ooooo.   .ooooo.  ooo. .oo.  .oo.   ooo. .oo.  .oo.    .ooooo.  ooo. .oo.   .o888oo  .oooo.o 
        d88' `"Y8 d88' `88b `888P"Y88bP"Y88b  `888P"Y88bP"Y88b  d88' `88b `888P"Y88b    888   d88(  "8 
        888       888   888  888   888   888   888   888   888  888ooo888  888   888    888   `"Y88b.  
        888   .o8 888   888  888   888   888   888   888   888  888    .o  888   888    888 . o.  )88b 
        `Y8bod8P' `Y8bod8P' o888o o888o o888o o888o o888o o888o `Y8bod8P' o888o o888o   "888" 8""888P' 
        -->
        <collection name="comments">
            <scope name="elixir.comment.single" spell-check="true">
                <expression>(\#)(.*)$</expression>
                <capture number="1" name="elixir.puncuation.definition.begin" />
                <capture number="2" name="elixir.comment.content" />
            </scope>
            <scope name="elixir.comment.documentation.heredoc" spell-check="true">
                <starts-with>
                    <expression>@(module|type)?doc\s+(~S)?&quot;&quot;&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;&quot;&quot;</expression>
                </ends-with>
            </scope>
            <scope name="elixir.comment.documentation.false">
                <expression>@(module|type)?doc\s+(false)$</expression>
            </scope>
        </collection>
        
        <!-- 
              .o8             .o88o.  o8o               o8o      .    o8o                                 
             "888             888 `"  `"'               `"'    .o8    `"'                                 
         .oooo888   .ooooo.  o888oo  oooo  ooo. .oo.   oooo  .o888oo oooo   .ooooo.  ooo. .oo.    .oooo.o 
        d88' `888  d88' `88b  888    `888  `888P"Y88b  `888    888   `888  d88' `88b `888P"Y88b  d88(  "8 
        888   888  888ooo888  888     888   888   888   888    888    888  888   888  888   888  `"Y88b.  
        888   888  888    .o  888     888   888   888   888    888 .  888  888   888  888   888  o.  )88b 
        `Y8bod88P" `Y8bod8P' o888o   o888o o888o o888o o888o   "888" o888o `Y8bod8P' o888o o888o 8""888P' 
        -->
        <collection name="definitions">
        </collection>

        <!-- 
        oooo                                                                        .o8           
        `888                                                                       "888           
         888  oooo   .ooooo.  oooo    ooo oooo oooo    ooo  .ooooo.  oooo d8b  .oooo888   .oooo.o 
         888 .8P'   d88' `88b  `88.  .8'   `88. `88.  .8'  d88' `88b `888""8P d88' `888  d88(  "8 
         888888.    888ooo888   `88..8'     `88..]88..8'   888   888  888     888   888  `"Y88b.  
         888 `88b.  888    .o    `888'       `888'`888'    888   888  888     888   888  o.  )88b 
        o888o o888o `Y8bod8P'     .8'         `8'  `8'     `Y8bod8P' d888b    `Y8bod88P" 8""888P' 
                              .o..P'                                                              
                              `Y8P'                                                               
        -->
        <collection name="keywords">
            <scope name="elixir.keyword.construct">
                <strings>
                    <string>alias</string>
                    <string>def</string>
                    <string>defdelegate</string>
                    <string>defexception</string>
                    <string>defguard</string>
                    <string>defguardp</string>
                    <string>defimpl</string>
                    <string>defmacro</string>
                    <string>defmacrop</string>
                    <string>defmodule</string>
                    <string>defoverridable</string>
                    <string>defp</string>
                    <string>defprotocol</string>
                    <string>defstruct</string>
                    <string>describe</string>
                    <string>do</string>
                    <string>end</string>
                    <string>fn</string>
                    <string>import</string>
                    <string>quote</string>
                    <string>test</string>
                    <string>unquote</string>
                    <string>use</string>
                </strings>
            </scope>
            <scope name="elixir.keyword.condition">
                <strings>
                    <string>case</string>
                    <string>cond</string>
                    <string>else</string>
                    <string>if</string>
                    <string>when</string>
                    <string>unless</string>
                </strings>
            </scope>
            <scope name="elixir.keyword.statement">
                <strings>
                    <string>assert</string>
                    <string>catch</string>
                    <string>exit</string>
                    <string>for</string>
                    <string>raise</string>
                    <string>receive</string>
                    <string>rescue</string>
                    <string>throw</string>
                    <string>try</string>
                    <string>with</string>
                </strings>
            </scope>
            <scope name="elixir.keyword.operator">
                <strings>
                    <string>after</string>
                    <string>and</string>
                    <string>in</string>
                    <string>not</string>
                    <string>or</string>
                </strings>
            </scope>
            <scope name="elixir.keyword.self">
                <strings>
                    <string>super</string>
                </strings>
            </scope>
        </collection>
        
        <!--
                              oooo                                 
                              `888                                 
        oooo    ooo  .oooo.    888  oooo  oooo   .ooooo.   .oooo.o 
         `88.  .8'  `P  )88b   888  `888  `888  d88' `88b d88(  "8 
          `88..8'    .oP"888   888   888   888  888ooo888 `"Y88b.  
           `888'    d8(  888   888   888   888  888    .o o.  )88b 
            `8'     `Y888""8o o888o  `V88V"V8P' `Y8bod8P' 8""888P'                                  
        -->
        <collection name="values">
            <scope name="elixir.value.boolean">
                <strings>
                    <string>true</string>
                    <string>false</string>
                </strings>
            </scope>
            <scope name="elixir.value.null">
                <strings>
                    <string>nil</string>
                </strings>
            </scope>
            <scope name="elixir.value.number.binary">
                <expression>\b0b[01]+\b</expression>
            </scope>
            <scope name="elixir.value.number.hex">
                <expression>\b0x[a-fA-F0-9]+\b</expression>
            </scope>
            <scope name="elixir.value.number.octal">
                <expression>\b0o[0-7]+\b</expression>
            </scope>
            <scope name="elixir.value.number.float">
                <!-- https://regexr.com/62tp7 -->
                <expression>
                    (?x:                # turn on extended mode, allows arbitrary whitespace
                        (
                            [-]?        # optional minus sign
                            [0-9]*[.]   # zero or more digits followed by a '.'
                            [0-9]+      # at least one digit
                            [eE]        # exponent indicator
                            [-+]?       # optional minus/plus sign
                            [0-9]+      # at least one digit
                        )
                        \b              # bounded
                    )
                </expression>
            </scope>
            <scope name="elixir.value.number.decimal">
                <!-- https://regexr.com/62tpa -->
                <!-- <expression>\-?(?:\d+(?:\.\d)?|(?:\.\d+))\b</expression> -->
                <!-- <expression>
                    (?x:                      # turn on extended mode, allows arbitrary whitespace
                        (
                            10{0,2}(?:_0{3})+ # match numbers like 1_000_000
                            |                 # or match decimals
                            (
                                [-]?          # optional minus sign
                                [0-9]*        # zero or more digits
                                [.]?          # optional '.'
                                [0-9]*        # zero or more digits
                            )
                            \b
                        ) 
                    )
                </expression> -->
                <expression />
            </scope>
            <scope name="elixir.value.list">
                <symbol type="expression">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\[</expression>
                    <capture number="0" name="elixir.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\]</expression>
                    <capture number="0" name="elixir.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="identifiers" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
            <scope name="elixir.value.tuple">
                <symbol type="expression">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\{</expression>
                    <capture number="0" name="elixir.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\}</expression>
                    <capture number="0" name="elixir.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="identifiers" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
            <scope name="elixir.value.map">
                <symbol type="struct">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\%\{</expression>
                    <capture number="0" name="elixir.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\}</expression>
                    <capture number="0" name="elixir.bracket" />
                </ends-with>
                <subscopes>
                    <scope name="elixir.operator">
                        <expression>\s(\=&gt;)\s</expression>
                        <capture number="1" name="elixir.operator" />
                    </scope>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="identifiers" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
            <include syntax="self" collection="strings" />
        </collection>
        
        <!-- 
         o8o        .o8                            .    o8o   .o88o.  o8o                              
         `"'       "888                          .o8    `"'   888 `"  `"'                              
        oooo   .oooo888   .ooooo.  ooo. .oo.   .o888oo oooo  o888oo  oooo   .ooooo.  oooo d8b  .oooo.o 
        `888  d88' `888  d88' `88b `888P"Y88b    888   `888   888    `888  d88' `88b `888""8P d88(  "8 
         888  888   888  888ooo888  888   888    888    888   888     888  888ooo888  888     `"Y88b.  
         888  888   888  888    .o  888   888    888 .  888   888     888  888    .o  888     o.  )88b 
        o888o `Y8bod88P" `Y8bod8P' o888o o888o   "888" o888o o888o   o888o `Y8bod8P' d888b    8""888P' 
        -->
        <collection name="identifiers">
            <!-- https://hexdocs.pm/elixir/master/Module.html#module-module-attributes -->
            <scope name="elixir.module.attributes">
                <expression>(@[a-z]\w*)</expression>
                <capture number="1" name="elixir.identifier.variable.instance" />
            </scope>
            <scope name="elixir.function.typespec">
                <starts-with>
                    <expression>(@spec|@type|@typep)</expression>
                    <capture number="0" name="elixir.identifier.typespec" />
                </starts-with>
                <ends-with>
                    <expression>^\S</expression>
                </ends-with>
                <subscopes>
                    <scope name="elixir.operator">
                        <expression>::</expression>
                    </scope>
                    <scope name="elixir.operator">
                        <expression>\-&gt;</expression>
                    </scope>
                </subscopes>
            </scope>
            
            <!-- https://hexdocs.pm/elixir/1.12/syntax-reference.html#atoms -->
            <scope name="elixir.identifier.constant.atom.quoted">
                <expression>:["'].+["']\b</expression>
            </scope>
            <scope name="elixir.identifier.constant.atom.unquoted">
                <expression>
                    (?x:                # turn on extended mode, allows arbitrary whitespace
                       :[A-Za-z]        # must start with ':' and alpha
                       [A-Za-z0-9_@]*   # zero or more alphanumeric to include '_' or '@'
                       [!?]?            # can end with '!' or '?'
                    )
                </expression>
            </scope>
            <scope name="elixir.identifier.function">
                <expression>
                    (?x:                # turn on extended mode, allows arbitrary whitespace
                        \b              # bounded
                        (?&lt;!\.)      # negative lookbehind to ensure no '.' found
                        ([a-z]\w*[!?]?) # function name must start with lower case and can end with '!' or '?'
                        (?=\()          # positive lookahead for '('
                    )
                </expression>
                <capture number="1" name="elixir.identifier.function.name" />
            </scope>
        </collection>
        
        <!--
                     .             o8o                                  
                   .o8             `"'                                  
         .oooo.o .o888oo oooo d8b oooo  ooo. .oo.    .oooooooo  .oooo.o 
        d88(  "8   888   `888""8P `888  `888P"Y88b  888' `88b  d88(  "8 
        `"Y88b.    888    888      888   888   888  888   888  `"Y88b.  
        o.  )88b   888 .  888      888   888   888  `88bod8P'  o.  )88b 
        8""888P'   "888" d888b    o888o o888o o888o `8oooooo.  8""888P' 
                                                    d"     YD           
                                                    "Y88888P'  
        -->
        <collection name="interpolations">
            <scope>
                <starts-with>
                    <expression>(\#\{)</expression>
                    <capture number="0" name="elixir.string-template" />
                </starts-with>
                <ends-with>
                    <expression>(\})</expression>
                    <capture number="0" name="elixir.string-template" />
                </ends-with>
                <subscopes>               
                    <include syntax="self" collection="keywords" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
        </collection>
        
        <collection name="strings">
            <!-- Sigils -->
            <include syntax="self" collection="elixir.sigil.char-list" />
            <include syntax="self" collection="elixir.sigil.regexp" />
            <include syntax="self" collection="elixir.sigil.string" />
            <include syntax="self" collection="elixir.sigil.word-list" />
            <include syntax="self" collection="elixir.sigil.naive-date-time" />
            <include syntax="self" collection="elixir.sigil.date-time" />
            <include syntax="self" collection="elixir.sigil.time" />
            <include syntax="self" collection="elixir.sigil.custom" />
            
            <!-- Strings  -->
            <scope name="elixir.string.multiline" spell-check="true">
                <symbol type="comment">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>&quot;&quot;&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;&quot;&quot;</expression>
                </ends-with>
            </scope>
            <scope name="elixir.string.double-quoted">
                <starts-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="elixir.string.quoted.double" />
                </starts-with>
                <ends-with>
                    <expression>&quot;|(?:(?&lt;!\\)$)</expression>
                    <capture number="0" name="elixir.string.quoted.double" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
        </collection>
        
        <!-- Sigils -->
        <collection name="elixir.sigil.char-list">
            <scope name="elixir.string.sigil.char-list.lowercase.pointy-brackets">
                <starts-with>
                    <expression>(~c&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.char-list.uppercase.pointy-brackets">
                <starts-with>
                    <expression>(~C&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.char-list.lowercase.curly-brackets">
                <starts-with>
                    <expression>(~c\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\})</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.char-list.uppercase.curly-brackets">
                <starts-with>
                    <expression>(~C\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\})</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.char-list.lowercase.square-brackets">
                <starts-with>
                    <expression>(~c\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\])</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.char-list.uppercase.square-brackets">
                <starts-with>
                    <expression>(~C\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\])</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.char-list.lowercase.parens">
                <starts-with>
                    <expression>(~c\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\))</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.char-list.uppercase.parens">
                <starts-with>
                    <expression>(~C\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\))</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.char-list.lowercase.pipes">
                <starts-with>
                    <expression>(~c\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.char-list.uppercase.pipes">
                <starts-with>
                    <expression>(~C\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.char-list.lowercase.forward-slashes">
                <starts-with>
                    <expression>(~c\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.char-list.uppercase.forward-slashes">
                <starts-with>
                    <expression>(~C\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.char-list.lowercase.double-quotes">
                <starts-with>
                    <expression>(~c&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.char-list.uppercase.double-quotes">
                <starts-with>
                    <expression>(~C&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.char-list.lowercase.single-quotes">
                <starts-with>
                    <expression>(~c&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.char-list.uppercase.single-quotes">
                <starts-with>
                    <expression>(~C&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
        </collection>
        
        <collection name="elixir.sigil.regexp">
            <scope name="elixir.string.sigil.regexp.lowercase.pointy-brackets">
                <starts-with>
                    <expression>(~r&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.regexp.uppercase.pointy-brackets">
                <starts-with>
                    <expression>(~R&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.regexp.lowercase.curly-brackets">
                <starts-with>
                    <expression>(~r\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\}[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.regexp.uppercase.curly-brackets">
                <starts-with>
                    <expression>(~R\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\}[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.regexp.lowercase.square-brackets">
                <starts-with>
                    <expression>(~r\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\][fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.regexp.uppercase.square-brackets">
                <starts-with>
                    <expression>(~R\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\][fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.regexp.lowercase.parens">
                <starts-with>
                    <expression>(~r\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\)[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.regexp.uppercase.parens">
                <starts-with>
                    <expression>(~R\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\)[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.regexp.lowercase.pipes">
                <starts-with>
                    <expression>(~r\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.regexp.uppercase.pipes">
                <starts-with>
                    <expression>(~R\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.regexp.lowercase.forward-slashes">
                <starts-with>
                    <expression>(~r\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.regexp.uppercase.forward-slashes">
                <starts-with>
                    <expression>(~R\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.regexp.lowercase.double-quotes">
                <starts-with>
                    <expression>(~r&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\&quot;[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.regexp.uppercase.double-quotes">
                <starts-with>
                    <expression>(~R\&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\&quot;[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.regexp.lowercase.single-quotes">
                <starts-with>
                    <expression>(~r&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\&apos;[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.regexp.uppercase.single-quotes">
                <starts-with>
                    <expression>(~R\&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\&apos;[fimsuUx]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
        </collection>
        
        <collection name="elixir.sigil.string">
            <scope name="elixir.sigil.string.lowercase.pointy-brackets">
                <starts-with>
                    <expression>(~s&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.string.uppercase.pointy-brackets">
                <starts-with>
                    <expression>(~S&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.sigil.string.lowercase.curly-brackets">
                <starts-with>
                    <expression>(~s\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\})</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.string.uppercase.curly-brackets">
                <starts-with>
                    <expression>(~S\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\})</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.sigil.string.lowercase.square-brackets">
                <starts-with>
                    <expression>(~s\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\])</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.string.uppercase.square-brackets">
                <starts-with>
                    <expression>(~S\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\])</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.sigil.string.lowercase.parens">
                <starts-with>
                    <expression>(~s\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\))</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.string.uppercase.parens">
                <starts-with>
                    <expression>(~S\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\))</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.sigil.string.lowercase.pipes">
                <starts-with>
                    <expression>(~s\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.string.uppercase.pipes">
                <starts-with>
                    <expression>(~S\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.sigil.string.lowercase.forward-slashes">
                <starts-with>
                    <expression>(~s\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.string.uppercase.forward-slashes">
                <starts-with>
                    <expression>(~S\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.sigil.string.lowercase.double-quotes">
                <starts-with>
                    <expression>(~s&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.string.uppercase.double-quotes">
                <starts-with>
                    <expression>(~S&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.sigil.string.lowercase.single-quotes">
                <starts-with>
                    <expression>(~s&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.string.uppercase.single-quotes">
                <starts-with>
                    <expression>(~S&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
        </collection>
        
        <collection name="elixir.sigil.word-list">
            <scope name="elixir.string.sigil.word-list.lowercase.pointy-brackets">
                <starts-with>
                    <expression>(~w&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.word-list.uppercase.pointy-brackets">
                <starts-with>
                    <expression>(~W&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.word-list.lowercase.curly-brackets">
                <starts-with>
                    <expression>(~w\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\}[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.word-list.uppercase.curly-brackets">
                <starts-with>
                    <expression>(~W\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\}[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.word-list.lowercase.square-brackets">
                <starts-with>
                    <expression>(~w\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\][acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.word-list.uppercase.square-brackets">
                <starts-with>
                    <expression>(~W\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\][acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.word-list.lowercase.parens">
                <starts-with>
                    <expression>(~w\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\)[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.word-list.uppercase.parens">
                <starts-with>
                    <expression>(~W\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\)[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.word-list.lowercase.pipes">
                <starts-with>
                    <expression>(~w\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.word-list.uppercase.pipes">
                <starts-with>
                    <expression>(~W\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.word-list.lowercase.forward-slashes">
                <starts-with>
                    <expression>(~w\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.word-list.uppercase.forward-slashes">
                <starts-with>
                    <expression>(~W\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.word-list.lowercase.double-quotes">
                <starts-with>
                    <expression>(~w&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.word-list.uppercase.double-quotes">
                <starts-with>
                    <expression>(~W&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.word-list.lowercase.single-quotes">
                <starts-with>
                    <expression>(~w&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.word-list.uppercase.single-quotes">
                <starts-with>
                    <expression>(~W&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;[acs]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
        </collection>
        
        <collection name="elixir.sigil.naive-date-time">
            <scope name="elixir.string.sigil.naive-date-time.uppercase.pointy-brackets">
                <starts-with>
                    <expression>(~N&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.naive-date-time.uppercase.curly-brackets">
                <starts-with>
                    <expression>(~N\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\})</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.naive-date-time.uppercase.square-brackets">
                <starts-with>
                    <expression>(~N\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\])</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.naive-date-time.uppercase.parens">
                <starts-with>
                    <expression>(~N\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\))</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.naive-date-time.uppercase.pipes">
                <starts-with>
                    <expression>(~N\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.naive-date-time.uppercase.forward-slashes">
                <starts-with>
                    <expression>(~N\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.naive-date-time.uppercase.double-quotes">
                <starts-with>
                    <expression>(~N&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.naive-date-time.uppercase.single-quotes">
                <starts-with>
                    <expression>(~N&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
        </collection>
        
        <collection name="elixir.sigil.date-time">
            <scope name="elixir.string.sigil.date-time.uppercase.pointy-brackets">
                <starts-with>
                    <expression>(~U&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.date-time.uppercase.curly-brackets">
                <starts-with>
                    <expression>(~U\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\})</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.date-time.uppercase.square-brackets">
                <starts-with>
                    <expression>(~U\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\])</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.date-time.uppercase.parens">
                <starts-with>
                    <expression>(~U\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\))</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.date-time.uppercase.pipes">
                <starts-with>
                    <expression>(~U\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.date-time.uppercase.forward-slashes">
                <starts-with>
                    <expression>(~U\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.date-time.uppercase.double-quotes">
                <starts-with>
                    <expression>(~U&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.date-time.uppercase.single-quotes">
                <starts-with>
                    <expression>(~U&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
        </collection>
        
        <collection name="elixir.sigil.time">
            <scope name="elixir.string.sigil.time.uppercase.pointy-brackets">
                <starts-with>
                    <expression>(~T&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.time.uppercase.curly-brackets">
                <starts-with>
                    <expression>(~T\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\})</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.time.uppercase.square-brackets">
                <starts-with>
                    <expression>(~T\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\])</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.time.uppercase.parens">
                <starts-with>
                    <expression>(~T\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\))</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.time.uppercase.pipes">
                <starts-with>
                    <expression>(~T\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.time.uppercase.forward-slashes">
                <starts-with>
                    <expression>(~T\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.time.uppercase.double-quotes">
                <starts-with>
                    <expression>(~T&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.time.uppercase.single-quotes">
                <starts-with>
                    <expression>(~T&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
        </collection>
        
        <collection name="elixir.sigil.custom">
            <scope name="elixir.string.sigil.custom.lowercase.pointy-brackets">
                <starts-with>
                    <expression>(~[a-z]&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.custom.uppercase.pointy-brackets">
                <starts-with>
                    <expression>(~[A-Z]&lt;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.custom.lowercase.curly-brackets">
                <starts-with>
                    <expression>(~[a-z]\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\}[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.custom.uppercase.curly-brackets">
                <starts-with>
                    <expression>(~[A-Z]\{)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\}[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.custom.lowercase.square-brackets">
                <starts-with>
                    <expression>(~[a-z]\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\][a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.custom.uppercase.square-brackets">
                <starts-with>
                    <expression>(~[A-Z]\[)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\][a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.custom.lowercase.parens">
                <starts-with>
                    <expression>(~[a-z]\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\)[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.custom.uppercase.parens">
                <starts-with>
                    <expression>(~[A-Z]\()</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\)[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.custom.lowercase.pipes">
                <starts-with>
                    <expression>(~[a-z]\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.custom.uppercase.pipes">
                <starts-with>
                    <expression>(~[A-Z]\|)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\|[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.custom.lowercase.forward-slashes">
                <starts-with>
                    <expression>(~[a-z]\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.custom.uppercase.forward-slashes">
                <starts-with>
                    <expression>(~[A-Z]\/)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(\/[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.custom.lowercase.double-quotes">
                <starts-with>
                    <expression>(~[a-z]&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.custom.uppercase.double-quotes">
                <starts-with>
                    <expression>(~[A-Z]&quot;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
            
            <scope name="elixir.string.sigil.custom.lowercase.single-quotes">
                <starts-with>
                    <expression>(~[a-z]&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
            </scope>
            <scope name="elixir.string.sigil.custom.uppercase.single-quotes">
                <starts-with>
                    <expression>(~[A-Z]&apos;)</expression>
                    <capture number="1" name="elixir.string.sigil.begin" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;[a-z]*)</expression>
                    <capture number="1" name="elixir.string.sigil.end" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="interpolations" />
                </subscopes>
            </scope>
        </collection>
        
        <!--
                                             .                         
                                           .o8
        .oooo.o oooo    ooo ooo. .oo.   .o888oo  .oooo.   oooo    ooo 
        d88(  "8  `88.  .8'  `888P"Y88b    888   `P  )88b   `88b..8P'  
        `"Y88b.    `88..8'    888   888    888    .oP"888     Y888'    
        o.  )88b    `888'     888   888    888 . d8(  888   .o8"'88b   
        8""888P'     .8'     o888o o888o   "888" `Y888""8o o88'   888o 
                 .o..P'                                                
                 `Y8P'
        -->
        <collection name="syntax">
            <!-- Brackets -->
            <scope name="elixir.bracket.curly">
                <expression>(\{|\})</expression>
            </scope>
            <scope name="elixir.bracket.square">
                <expression>(\[|\])</expression>
            </scope>
            <scope name="elixir.bracket.parens">
                <expression>(\(|\))</expression>
            </scope>
            
            <!-- Operators https://hexdocs.pm/elixir/1.12/operators.html#general-operators -->
            <scope name="elixir.operator">
                <expression>\=\=\=</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\=\=</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\s\=\s</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\=~</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>!\=</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\+\=</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\-\=</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\*\=</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&lt;=</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&gt;=</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>%\=</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\+</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\-</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\*\*</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\*</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\/</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\b%\b</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&lt;&lt;&lt;</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&lt;&lt;</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&lt;</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&gt;&gt;&gt;</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&gt;&gt;</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&gt;</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&amp;&amp;&amp;</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>&amp;&amp;</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\b(\|\|\|)\b</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\b(\|\|)\b</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>\!</expression>
            </scope>
            <scope name="elixir.operator.pin">
                <expression>\^</expression>
            </scope>
            <scope name="elixir.operator.capture">
                <expression>&amp;</expression>
            </scope>
            <scope name="elixir.operator.pipeline">
                <expression>\|></expression>
            </scope>
            <scope name="elixir.operator.binary-concatenation">
                <expression>&lt;&gt;</expression>
            </scope>
            <scope name="elixir.operator.type">
                <expression>::</expression>
            </scope>
        </collection>
    </collections>
</syntax>
